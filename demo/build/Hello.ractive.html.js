System.register(['./chunk2.js', './chunk7.js'], function (exports, module) {
  'use strict';
  var Window, click;
  return {
    setters: [function (module) {
      Window = module.Window;
    }, function (module) {
      click = module.default;
    }],
    execute: function () {

      var Hello = exports('default', Window.extend({
          template: {v:4,t:[{t:7,e:"tabs",m:[{n:"flat",f:0,t:13},{n:"pad",f:0,t:13},{n:"class-secondary",t:13},{n:"height",f:"dynamic",t:13},{n:"transition",f:"fade",t:13}],f:["\n  ",{t:7,e:"tab",m:[{n:"title",f:"Intro",t:13}],f:[{t:7,e:"marked",f:["\n    <div style=\"text-align: center;\"><img src=\"./raui.svg\" style=\"width: 150px; text-align: center;\" alt=\"pronounced like Maui\" /></div>\n\n    <a href=\"https://github.com/evs-chris/raui\" target=_blank>RaUI</a> is a set of components and plugins for <a href=\"https://ractive.js.org\" target=_blank>Ractive.js</a> that can be handy for heavier web applications. Some of them are a bit unusual for modern web applications, but they try to stick close to <a href=\"https://material.io/\" target=_blank>Material</a> guidelines by default where it makes sense. They also do their best to stay completely responsive from iPhone 4-sized screens all the way up to 50+\" 4k monitors.\n\n    RaUI also takes advantage of Ractive's dynamic style support to be as themeable as possible. The set of variables is a bit in flux right now, but the common variables right now are `fg1`, `fga1`, `bg1`, and `bga1`, which are the foreground color, an alternate, the background color, and an alternate, respectively. There are also `fg2`, `fga2`, `bg2`, and `bga2` for things that need additional colors. The foregrounds and backgrounds in a set are meant to be contrasted enough that they can safely be used in any fore/back combination and still be legible.\n    \n    Beyond colors, there are style variables in some components that also control markup - because style variables are available to both templates and data.\n\n    RaUI also strives to have both declarative and dynamic control over each component, meaning that you should be able to conveniently and concisely write template that describes what the UI should look like while also being able to change or extend it on the fly. For instance, you should be able to set a title on a menu item in the template and then change the set title from your code by getting a handle to the menu item and simply setting the title to a new string. This is achieved by taking the template that is passed into a component and turning it into a data construct while the component is being assembled, so the source for these components is a little hairier than your average Ractive component.\n\n    ### Why RaUI?\n\n    This project started life as a handful of components extracted from various common projects and was unnamed for a while. It then got the name `ractive-materialish` from the fact that it tried to clone bits of Material design into usable Ractive components. As it started to stray a bit from Material in a few style options, I decided that I'd rather be in Maui writing my Ractive UI components, so I jammed them together, why not? Also, RUI is already taken on npm... thanks React.\n\n    ### Usage  \n\n    There are a few different ways to use raui:\n    \n    * using a bundler with the appropriate build plugins, like rollup or webpack, with the raui/src components and scripts\n    * using a bundler with the raui/es modules\n    * using an AMD or CommonJS loader with the pre-built UMD modules\n    * using a script tag and a UMD module, where the plugins will automatically register themselves in the appropriate Ractive.defaults registry as RM${name}\n\n    If you chose one of the module/loader means of usage, you can use most of the components directly using a named export e.g.\n\n    ```js\n    import { Menu } from 'raui/es/Menu';\n    Ractive.components = Menu;\n    ```\n\n    You can also use them as a plugin along with the `use` init/extend option or the `Ractive.use()` or `instance.use()` methods.\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Components",t:13}],f:[{t:7,e:"marked",f:["\n    There are a number of components in the raui family, some of which are proper Ractive components, for the more complicated components, and some of which are macros, for the lighter widget-y things. When including a macro-based component directly, be sure to register it in the appropriate partials registry rather than the components registry. When including the component as a plugin, proper registering is handled for you.\n\n    Here's the list:\n\n    * AppBar - A titlebar-like thing that goes across the top of your app\n    * Card - A material-ish card that's mostly just a boilerplate macro\n    * JSONEditor - An object editor tree\n    * Menu - A side menu with expanding sections and raw embeds\n    * Shell - A responsive app shell with slide-y out-y sides\n    * Split - A multi-paned splitter in vertical and horizontal flavors\n    * Table - A grid-like table with built-in filtering, sorting, and pagination\n    * Tabs - Your plain old garden variety tabbed container\n    * Toggle - A little switch to swap in for your checkboxes\n    * Window - A set of components that let you build a responsive MDI in a browser (if that's what you're into)\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Decorators",t:13}],f:[{t:7,e:"marked",f:["\n    Ractive's decorators are handy little things that let you augment an HTML element as it's being rendered. RaUI makes good use of these both internally in some components and as reusable parts for generic app use.\n\n    Here's the list:\n\n    * AceEditor - Turns an element into an Ace editor\n    * CodeMirror - Turns an element into a CodeMirror editor\n    * Form - A few helpers to make your forms slightly more convenient to author\n    * Grid - An internally responsive, adjustable grid\n    * Marked - A macro and decorator combo that renders its contents via `marked` Markdown\n    * MaskedInput - Apply a mask to an input\n    * ScrollSpy - A piar of decorators that give you scroll spys and targets\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Events",t:13}],f:[{t:7,e:"marked",f:["\n    Ractive's custom events can be used to string together browser events, like touch/pointer events, into higher level abstractions, like swipes. They can also be used to abstract away weird differences in different types of events across browsers or other idiosyncracies of DOM events like `click` and `dblclick` and various touches. RaUI exposes a few helpful events that are used internally in a few places.\n\n    Here's the list:\n\n    * Click - Configurable clicks/taps with an optional hold on the last\n    * Keys - Declarative key listeners\n    * Swipe - Listen for up, down, left, and right swipes with extrapoled thresholds\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Transitions",t:13}],f:[{t:7,e:"marked",f:["\n    CSS transitions are quite nice, but they have some quirks that make them a little weird to manage. Ractive transitions patch over some of that weirdness and supply an easy way to hook into elements rendering and unrendering to animate those processes. RaUI uses a few custom transitions internally and exposes them for use.\n\n    Here's the list:\n\n    * Expand - Grow/shrink full height and then fade in/out the contents\n    * Fade - Your bog-standard fade in/fade out transition\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Helpers",t:13}],f:[{t:7,e:"marked",f:["\n    Beyond components, decorators, macros, events, and transitions, RaUI also exposes a few other helpers that come in handy when making apps.\n\n    Here's the list:\n\n    * Button - Just a style helper to make `<button>`s more Material\n    * Toast - A toasting system that can be installed on any old Ractive instance\n  "]}]},"\n"]}]},
          use: [click({ name: 'clickh', count: 1, hold: true })],
          options: {
            title: 'Hello, RaUI',
            resizable: true,
            width: '48em',
            height: '30em',
            flex: true
          }
        }));

    }
  };
});
