System.register(['./chunk2.js', './chunk5.js'], function (exports, module) {
  'use strict';
  var Window, Menu;
  return {
    setters: [function (module) {
      Window = module.Window;
    }, function (module) {
      Menu = module.default;
    }],
    execute: function () {

      var Menu_ractive = exports('default', Window.extend({
          template: {v:4,t:[{t:7,e:"tabs",m:[{n:"flat",f:0,t:13},{n:"pad",f:0,t:13},{n:"class-secondary",t:13},{n:"height",f:"dynamic",t:13}],f:["\n  ",{t:7,e:"tab",m:[{n:"title",f:"Intro",t:13}],f:[{t:7,e:"marked",f:["\n    This is a vertical menu that supports items with nested children, titled sections, and containers with any old content. Horizontal menus tend not to scale well at all below a certain width, and nobody likes horizontal scrolling. This type of menu pairs well with the side containers of the shell and a nice cabernet.\n\n    ### Items\n\n    Menu items have three sections for content - a left, title, and right. The title sits in the center and pushes the left and right in their nominal directions. Each section can contain anything you want, but the title is typically used for text, and the left and right are good for icons and indicators.\n    \n    Menu items that have children automatically get and expansion indicator to the right of the the right section. The expansion indicator is clickable and servers as the means to expanding the item if the title area happens to have its own action.\n\n    ### Sections\n\n    A section is simply a container with a title at the top. It has a bit of margin to keep it from running into other items, and it can contain any other menu item type.\n\n    ### Containers\n\n    A container is an item that is designed to have anything other than menu items as content. Containers are ideal for logos and global settings that are useful embedded in the menu, like `select`s and toggle switches.\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Usage",t:13}],f:[{t:7,e:"marked",f:["\n    ### Plugin Options\n\n    All options are optional.\n\n    * `name: string = 'menu'` - The name to use when registering the plugin as a component\n\n    ### Children\n\n    A menu is typically a declarative structure with many repeating children, so attributes don't really work well for configuration. As such, the menu is mostly configured using child nodes.\n\n    For content children that have an attribute version, the attribute takes precedent over the child e.g. `<item title=Foo><title>Bar</title></item>` will result in an item titled `Foo`.\n\n    * `item` - a menu item\n      * #### Attributes\n        * `title: string` - the title to display in the item. THis is rendered \n        * `action: event` - the listener used when the item is clicked\n        * `guard: boolean | () => boolean` - a condition that controls the display of the item. This is automatically mapped into the containing menu so that it stays up to date with the surrounding context.\n        * `ref: string` - the id for this item. You can get an API handle to items using their `ref`, if supplied. If this is an expression, it will automatically be mapped into the containing menu.\n        * `active: boolean | Handle -> boolean` - whether or not the item is currently active. This lets your application notify the menu when something changes states without involving the menu.\n        * `open` - if preset, the item will start in an open state if it has children\n      * #### Children\n        * `title` - any children are collected into a partial and yielded in the title section of the item\n        * `left` - any children are collected into a partial and yielded in the left section of the item\n        * `right` - any children are collected into a partial and yielded in the right section of the item\n        * `item|section|container` - other menu items are processed and collected as children of this item\n    * `section` - a menu section\n      * #### Attributes\n        * `title: string` - the title to display in the section\n      * #### Children\n        * `title` - any children are collected into a partial and yielded in the title section of the item\n        * `item|section|container` - other menu items are processed and collected as children of this item\n    * `container` - a menu container\n      * #### Attributes\n        * `pad` - if present, the container will have padding applied\n        * `content: string` - an HTML string to render in the container\n      * #### Children\n        * `*` - any children are collected into a partial and yielded in the container\n\n    ### API\n\n    The menu also has a full API for managing items. The `Item` object is what is built from the declarative API in the template above. You get a bit more control when creating items manually but at the expense of being able to use partials easily for content.\n\n    ##### Menu\n\n    * `addItem(item: Item, index?: number): Handle` - append an item to the menu root or insert it in the menu root at `index`, if provided\n    * `getHandle(what: ref string|selector string|Context|Node): Handle` - returns a handle to the menu item associated with the given `what`\n\n    #### Item\n\n    * `type: 'item' | 'section' | 'container'` - the type for this item\n    * `condition: boolean | () => boolean` - if the condition results in `true`, the item will be rendered\n    * `active: boolean | Handle => boolean` - if the condition results in `true`, the item will be flagged as active\n    * `action: () => void` - the function to call when the item is activated\n    * `ref: string` - register this item with the id `ref`\n    * `left: string` - an HTML string to render in the left section of the item if it is `type: 'item'`\n    * `right: string` - an HTML string to render in the right section of the item if it is `type: 'item'`\n    * `title: string` - an HTML string to render in the title section of the item if it is `type: 'item'` or `type: 'section'`\n    * `content: string` - an HTML string to render in the content sectino of the item if it is `type: 'container'`\n    * `pad: boolean` - if true and `type: 'container'`, the container will have padding applied\n    * `items: Item[]` - children for this item\n\n    #### Handle\n\n    An item handle presents a convenient API over `menu.get` and `menu.set` that manages the keypath to the item for you.\n\n    * `keypath: string` - a readonly property containing the keypath to the Item in the Menu data. This is mostly for internal use.\n    * `action: () => void` - gets or sets the action function called when the item is activated\n    * `active: boolean | Handle => boolean` - gets or sets the active flag for the item\n    * `addItem(item: Item, index?: number): Handle` - appends an item to this item's children or inserts it at the given index, if provided\n    * `open()` - expands the item\n    * `close()` - contracts the item\n    * `remove()` - removes the item from its parent container\n    * `get(keypath: string): any` - get a value relative to the item's keypath\n    * `set(keypath: string, value: any)` - set a value relative to the item's keypath\n  "]}]},"\n  ",{t:7,e:"tab",m:[{n:"title",f:"Example",t:13}],f:["\n    ",{t:7,e:"label",m:[{n:"field",t:71}],f:["\n      Title",{t:7,e:"select",m:[{n:"value",f:[{t:2,r:".title"}],t:13}],f:[{t:7,e:"option",f:["Things"]},{t:7,e:"option",f:["Spoons"]},{t:7,e:"option",f:["Former Wrestling Champions"]}]},"\n    "]},"\n    ",{t:7,e:"marked",f:["\n      ### Template:\n      ```handlebars\n      <menu style-width=20em>\n        <container style-background-color=\"#333\">\n          <div style=\"text-align: center; padding: 1em;\">\n            <div style=\"display: inline-block; border-radius: 100%; width: 4em; height: 4em; line-height: 4em; background-color: #07e; color: #fff;\">\n              RaUI\n            </div>\n          </div>\n        </container>\n        <item title=\"Welcome\" on-action=\"console.log('Welcome')\" />\n        <section title=Things>\n          <item open>\n            <title>Big Things</title>\n            <item title=\"Elephant\" on-action=\"console.log('Pfrrrrrrrrrrbbbbt')\" />\n            <item title=\"Dinosaur\" on-action=\"console.log('Raaaawwwwrr')\" />\n            <item title=\"The Rock\" on-action=\"console.log('Do you smell what the Rock is cooking?')\" />\n          </item>\n          <item title=\"Clicky Things\" on-action=\"console.log('I have an action and children, which may not be the best UX, but sometimes it\\'s better than an extra set of menu items.')\">\n            <item title=\"Car Blinker\" on-action=\"console.log('tchk tchk')\" />\n            <item title=\"Clock\" />\n            <item title=\"Metronome\" on-action=\"console.log('...travelocity?')\" />\n          </item>\n        </section>\n        <section>\n          <title>Other {{.title}}</title>\n          <item title=\"Middle\">\n            <left>L</left>\n            <right>R</right>\n          </item>\n          <item>\n            <title>With Children</title>\n            <right>#</right>\n            <item title=\"Child 1\" />\n            <item title=\"Child 2\" />\n            <item title=\"Babies with babies\">\n              <item title=\"Grandchild 1\" />\n              <item title=\"Grandchild 2\" />\n            </item>\n          </item>\n        </section>\n      </menu>\n      ```\n      ### Result:  \n    "]},"\n    ",{t:7,e:"menu",m:[{n:"style-width",f:"20em",t:13}],f:["\n      ",{t:7,e:"container",m:[{n:"style-background-color",f:"#333",t:13}],f:["\n        ",{t:7,e:"div",m:[{n:"style",f:"text-align: center; padding: 1em;",t:13}],f:["\n          ",{t:7,e:"div",m:[{n:"style",f:"display: inline-block; border-radius: 100%; width: 4em; height: 4em; line-height: 4em; background-color: #07e; color: #fff;",t:13}],f:["\n            RaUI\n          "]},"\n        "]},"\n      "]},"\n      ",{t:7,e:"item",m:[{n:"title",f:"Welcome",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"Welcome\")]"}}]},"\n      ",{t:7,e:"section",m:[{n:"title",f:"Things",t:13}],f:["\n        ",{t:7,e:"item",m:[{n:"open",f:0,t:13}],f:["\n          ",{t:7,e:"title",f:["Big Things"]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Elephant",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"Pfrrrrrrrrrrbbbbt\")]"}}]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Dinosaur",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"Raaaawwwwrr\")]"}}]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"The Rock",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"Do you smell what the Rock is cooking?\")]"}}]},"\n        "]},"\n        ",{t:7,e:"item",m:[{n:"title",f:"Clicky Things",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"I have an action and children, which may not be the best UX, but sometimes it's better than an extra set of menu items.\")]"}}],f:["\n          ",{t:7,e:"item",m:[{n:"title",f:"Car Blinker",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"tchk tchk\")]"}}]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Clock",t:13}]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Metronome",t:13},{n:["action"],t:70,f:{r:[],s:"[console.log(\"...travelocity?\")]"}}]},"\n        "]},"\n      "]},"\n      ",{t:7,e:"section",f:["\n        ",{t:7,e:"title",f:["Other ",{t:2,r:".title"}]},"\n        ",{t:7,e:"item",m:[{n:"title",f:"Middle",t:13}],f:["\n          ",{t:7,e:"left",f:["L"]},"\n          ",{t:7,e:"right",f:["R"]},"\n        "]},"\n        ",{t:7,e:"item",f:["\n          ",{t:7,e:"title",f:["With Children"]},"\n          ",{t:7,e:"right",f:["#"]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Child 1",t:13}]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Child 2",t:13}]},"\n          ",{t:7,e:"item",m:[{n:"title",f:"Babies with babies",t:13}],f:["\n            ",{t:7,e:"item",m:[{n:"title",f:"Grandchild 1",t:13}]},"\n            ",{t:7,e:"item",m:[{n:"title",f:"Grandchild 2",t:13}]},"\n          "]},"\n        "]},"\n      "]},"\n    "]},"\n  "]},"\n"]}],e:{"[console.log(\"Welcome\")]":function (){return([console.log("Welcome")]);},"[console.log(\"Pfrrrrrrrrrrbbbbt\")]":function (){return([console.log("Pfrrrrrrrrrrbbbbt")]);},"[console.log(\"Raaaawwwwrr\")]":function (){return([console.log("Raaaawwwwrr")]);},"[console.log(\"Do you smell what the Rock is cooking?\")]":function (){return([console.log("Do you smell what the Rock is cooking?")]);},"[console.log(\"I have an action and children, which may not be the best UX, but sometimes it's better than an extra set of menu items.\")]":function (){return([console.log("I have an action and children, which may not be the best UX, but sometimes it's better than an extra set of menu items.")]);},"[console.log(\"tchk tchk\")]":function (){return([console.log("tchk tchk")]);},"[console.log(\"...travelocity?\")]":function (){return([console.log("...travelocity?")]);}}}, css: " li > h4 { margin: 0; } ",
          cssId: 'demo-menu',
          use: [Menu()],
          options: {
            title: 'Component :: Menu',
            resizable: true, flex: true,
            width: '48em', height: '30em'
          }
        }));

    }
  };
});
